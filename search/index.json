[{"content":"查看IP地址 1 hostname -I 批量修改拓展名 1 2 3 for file in *.txt; do mv \u0026#34;$file\u0026#34; \u0026#34;${file%.txt}.md\u0026#34; done CRLF改为LF 需要安装dos2unix工具。\n1 find . -type f -exec dos2unix {} + docker 导出镜像为tar.gz包 1 docker save \u0026lt;image_name\u0026gt; | gzip \u0026gt; \u0026lt;image_name\u0026gt;.tar.gz 使用 docker load命令可以导入。\n1 docker load \u0026lt; \u0026lt;image_name\u0026gt;.tar.gz ","date":"2025-07-24T11:41:27+08:00","permalink":"https://queb.fun/p/3f205a3c/","title":"Linux妙妙命令备忘录"},{"content":"前段时间微软删除了在安装过程中使用 oobe/bypassnro.cmd 跳过强制联网注册的方法.现记录一个新的,更快而且不需要重启\n在安装界面按下 Shift + F10 打开 cmd, 在里面输入 start ms-cxh:localonly 回车执行.\nEOF\n","date":"2025-03-31T13:58:12+08:00","permalink":"https://queb.fun/p/bf59ca16/","title":"2025.03新的win11跳过OOBE联网"},{"content":"FairyScript 说 这篇文章是我在浏览他人博客的时候看到的,认为质量非常高.故转载存档.\n该文档的版权遵守原本的 CC0 版权协议.\n原文: https://www.kawabangga.com/posts/6851\n接下来是原文内容\n上周遇到的一个问题很有意思，后来搜索相关的资料，找到的也比较少，感觉有必要记录一下。\n问题的场景很简单：我们有两个路由设备同时发布了 10.81.0.0/16 的网段做 ECMP[^1^]，网络一切正常。拓扑如下图。现在，有一个新的 IP，只存在于 Router A 上，所以 Router A 宣告网段 10.81.100.100/32，而 Router B 不宣告。这样，由于在路由表中， /32 的 prefix 比 /16 要长，所以 Router X 在从路由表选路的时候， 10.81.100.100 会优先选择去 Router A，而对于其他的 10.81.0.0/16 的网段，会负载均衡到 A 和 B 两台路由器上。\n简化的拓扑图\n理论上，一切看似合理并且正常。但是 /32 的网段一经宣告， 10.81.0.0/16 的网络都挂了。\n事后我们得知，在 Router X 上有一条路由聚合配置。但是这条合理的路由聚合，怎么会让整个网段挂掉呢？\n为什么需要路由聚合呢？\nRouter A 每次宣告一个网段给 Router X，Router X 的 BGP 路由就会多一个。Router B 每次宣告一个网段，X 上也会多一个。可想而知，Router X 上的路由是它的下游的总和。同理，Router X 上游的路由器的路由将会更多。路由的条目越多，对路由器的性能要求就越高。所以，核心路由器要想处理所有的路由条目，就需要性能非常高。性能是有上限的，假设性能再搞也无法处理这么多路由，怎么办呢？我们可以优化另一个变量——路由条目[^2^]。\n如何减少路由条目呢？ 考虑下面 3 个网段：\n10.81.2.0/24 10.81.3.0/24 10.83.4.4/26 其实都可以汇聚成一个网段： 10.81.0.0/16。把这个网段宣告出去，收到的流量可以在 X 这里根据自己的路由表进行转发。\n这里产生了一个问题：就是我们宣告了自己没有路由的网段出去，比如我们的路由中并不存在 10.81.5.0/24 这个段，但是被我们的 10.81.0.0/16 宣告了出去。\n由此，会产生两个问题。第一个问题，假设其他路由器有到 10.81.5.0/24 的路由，那么会不会走到我们的 10.81.0.0/16 这里来呢？答案是不会的。因为 路由表的匹配规则是最长前缀匹配， /24 比我们的 /16 优先级更高。\n第二个问题更加严重一些，路由的聚合可能导致环路[^3^]。\n考虑下面这个拓扑图，两个路由器都存在路由聚合的配置。\n路由聚合导致环路产生的例子\n这里的问题是， 10.81.4.1 这个 IP 不存在于 A 也不存在于 B，但是由于路由聚合的配置，A 认为在 B 上，B 认为在 A 上，导致在转发的时候会出现环路。虽然 IP 层有 TTL 机制，会让这个包最终被丢弃，但是也会让两个路由器在某些网段的转发上浪费一些计算资源。\n如何避免在转发「不存在的网段」的时候出现的环路呢？一个思路是我们精确的控制聚合的配置，不配置出来可能产生环路的聚合，但是这几乎是不可能的。（就像用静态路由配置替代动态路由一样不可能）。\n另一个思路是，在 10.81.4.1 这种本地没有路由的包出现的时候，直接「黑洞」掉。方法很简单，就是在每次聚合的时候，创建一条路由，终点是 Null0，即直接丢弃。\n具体来说，在上图的 Router A 中，聚合本地的三条路由到 /16，我们应该这么做：\n向外宣告路由 10.81.0.0/16，以达到减少路由条目的目的[^4^]； 在本地插入一条 Null0 的路由，使得本地的路由最终如下。 1 2 3 4 10.81.0.0/16 -\u0026gt; Null0 10.81.1.0/24-\u0026gt;local 10.81.2.0/24-\u0026gt;local 10.81.3.0/24-\u0026gt;local 注意，路由表的顺序没有意义，因为用的是最长前缀匹配。转发包的时候，对于 10.81.1.0/24 这种本地存在的段，因为它们的前缀比 /16 长，所以正常转发；对于不存在的段，比如 10.81.4.1，会命中 10.81.0.0/16 -\u0026gt; Null0 的路由，直接在本地丢弃。这样，就可以阻止环路的产生。由聚合而自动产生的 /16 是一个防环的兜底路由，正常情况下，不应该使用这条路由，如果命中这条路由，说明无法转发的包到达了路由器，直接丢弃即可。\n回到本文开头的问题上，为什么宣告一条 /32 会导致整个网段挂掉呢？ Null0 不是说只是兜底而已吗？回答这个问题，还要补充一点知识。\nBGP 和路由表 路由设备按照路由表（叫做 RIB, Routing Information Base）进行转发（实际上还有一层加速用的 FIB，但是 FIB 的 source of the truth 是 RIB，所以这里先忽略）。 RIB 转发的逻辑是最长前缀匹配。\nRIB 是怎么生成的呢？一种是静态配置，即静态路由。另一种是动态路由协议。路由协议之间交换路由信息，然后负责动态修改 RIB。在有多条可达路由的时候，怎么决定把哪一条路由写入到 RIB 呢？这就是不同的路由协议来决定的了。比如，BGP 有 13 条选路原则[^5^]；OSPF 和 IS-IS 这种协议也有自己的路径选择算法。\n路由协议和 RIB 的关系[^6^]\n这张图比较好，不同的路由协议可以同时运行，不同的路由协议可以根据自己的算法来操作路由表，决定转发路径。\n路由的聚合也是路由协议的一部分。 像 OSPF, EIGRP, BGP 这些协议，都有关于路由聚合的定义和支持。重申一下：路由聚合是路由协议的 feature，而不是路由表 RIB 的。\n这也就是说，路由聚合中产生的 Null0 黑洞条目首先出现在 BGP 中，然后 BGP 根据自己的选路原则，放到路由表中。\n回到本文最先开始讨论的问题，现在就可以用上面的知识来解释这个问题了。\n首先，Router X 会收到 3 条路由。\n到达 Router X，经过聚合之后，在 BGP 里面，会有 4 条路，多出来的一条是聚合产生的 Null0 黑洞路由。\n到达 10.81.0.0/16 的路由有 3 个\nBGP 会按照自己的选路原则，在 10.81.0.0/16 的 3 条路径中选择一条放到 RIB 中。这 3 条路径中，Null0 这条可是本地路由，Weight 是最高的。所以，Null0 由于其他两条真实存在的路由，进入了 RIB。\nshow ip route\n可以看到路由表中，只有 10.81.100.100 明细路由和 10.81.0.0/16 到 Null0 的黑洞路由，其他两条路由被刷下去了。\n到这里，真相就大白了。 10.81.100.100 在没有发布的时候， 10.81.0.0/16 工作正常。但是一旦发布， 10.81.0.0/16 的正常路由就被路由聚合产生的 Null0 给刷下去了。\n数据中心网络高可用技术：ECMP Understand Route Aggregation in BGP – Cisco 网络中的环路和防环技术 确认了下没有写错，这里的意思是 Tiao Mu De Mu Di，博大精深的中文！↩︎ Select BGP Best Path Algorithm – Cisco 来源： FIB 表与 RIB 表的区别与联系 – \u0026amp;Yhao – 博客园 ","date":"2025-01-14T09:35:41Z","image":"https://queb.fun/p/9b2ac422/bgp-aggregation_hu_be53470cef009912.png","permalink":"https://queb.fun/p/9b2ac422/","title":"转载: 一个由 BGP Route Aggregation 引发的问题"},{"content":"gdal 重新投影的时候,注意不要包含极点坐标,会有神奇的bug\n建议使用 gdal_translate 提前切除极点坐标.\ngdal_translate -projwin 90 60 160 0 -of GTiff input.tif ouput.tif\n推荐阅读 https://github.com/syncpoint/terrain-rgb\n","date":"2024-09-07T10:16:47+08:00","image":"https://queb.fun/p/3d6d3035/cover_hu_1ba7ec3b312813f0.webp","permalink":"https://queb.fun/p/3d6d3035/","title":"gdal地图重投影的离奇bug"},{"content":"参考 https://studygolang.com/topics/15781?fr=sidebar\nhttps://wiki.eryajf.net/pages/52d983/#_2-linux-%E7%8E%AF%E5%A2%83%E7%BC%96%E8%AF%91\n正文 先装好\n1 2 mingw-w64 libz-mingw-w64 1 2 3 4 5 6 7 #!/bin/sh export CGO_ENABLED=1 export GOOS=windows export GOARCH=386 export CC=i686-w64-mingw32-gcc export CXX=i686-w64-mingw32-g++ go build -ldflags \u0026#39;-s -w -H=windowsgui\u0026#39; ","date":"2024-09-06T11:21:43+08:00","permalink":"https://queb.fun/p/63e1cdb6/","title":"在linux上交叉编译需要gcc的go程序"},{"content":" 中文互联网上的高质量内容,就像实数轴上的有理数一样多 \u0026ndash;FairyScript\n2024年我最大的痛苦来源便是中文互联网上高质量的内容和高质量的讨论越来越少了,大量的内容被限制在私域当中难以被触及.\n更大的问题是,缺少了广泛讨论的情况下,个人的情绪非常容易被小圈子放大(回音室效应).但直接在公开领域发言无异于在洪水中游泳.只能是在无穷的争论当中消磨掉理智.\n当今的互联网对于人类来说可能太大了.如何平衡交流的质量和防止回声室效应是未来一个很重要的课题.\n在2023年我接触到了 mastodon, 他的理念是比较新颖的. 但目前从我的角度来看,还没有体现出相较于 Twitter 的优势(排除掉 Twitter 作为商业公司的骚操作以外).\n互联网如何才能使全人类变得更好,更幸福? 我希望未来能够得到这个命题的答案.\n","date":"2024-08-29T17:45:12+08:00","permalink":"https://queb.fun/p/2968ee5a/","title":"互联网迷思"},{"content":"2024.9.14 更新 貌似这样装的rsync使用 windows 自带的 openssl 会有写奇怪的问题,最后还是选择安装了 choco 的 rsync\nhttps://community.chocolatey.org/packages/rsync\n前言 实际上写这篇文章的时候距离我配置rsync可能已经过了一万年,完全不记得细节了..所以以下的内容都是基于回忆写成的,可能存在部分不准确之处.\n参考 [https://qiita.com/clvth14/items/5a7eb26ddca49b7f57c2] [https://gist.github.com/radleta/0b337a2b14f761951cf2aab0578512b9]\n正式开始! 先安装zstd 这一步是可选的,大部分Windows的解压软件是自带这个功能的,可以考虑手动部署二进制文件就不需要这个了.但我仍然建议按照教程安装\n简单来说,去 [https://github.com/facebook/zstd/releases] 这里下载二进制,然后加入环境变量 (PATH 或者 .bashrc)\n下载Rsync二进制 去(这里)[http://repo.msys2.org/msys/x86_64/]下载压缩包,注意是rsync-〇〇〇–〇-x86_64.pkg.tar.zst 格式的.\n然后使用以下的命令解压缩\n1 2 zstd -d rsync-3.2.7-2-x86_64.pkg.tar.zst tar -xvf rsync-3.2.7-2-x86_64.pkg.tar 把解压出来的exe文件放到环境变量,或者直接放入 C:\\Program Files\\Git\\usr\\bin 文件夹 (这样仅限于gitbash方便调用)\n补齐必须的dll文件 同样的,去[http://repo.msys2.org/msys/x86_64/]下载对应的文件,解压缩放入环境变量\nlibzstd-1.5.2-2-x86_64.pkg.tar.zst libxxhash-0.8.1-1-x86_64.pkg.tar.zst libopenssl-3.0.7-2-x86_64.pkg.tar.zst\n大功告成!\n","date":"2024-08-27T09:38:58Z","permalink":"https://queb.fun/p/ae650ec1/","title":"Windows平台也要用Rsync!"},{"content":"store可以由一下几部分构成\ndata: 基本的数据 accessor: 方便基于一个索引(例如,id)从 store 中提取数据. 例如: getDataById() deriveData: 计算状态,基于 store 中已有的数据派生得来 mutation: 使 store 发生变化的动作,一般有参数.可以影响一个字段,也可以影响多个字段 event: 事件,不一定使 store 发生变化,也不一定有参数. ","date":"2024-08-27T09:35:41Z","permalink":"https://queb.fun/p/0397ec81/","title":"状态管理二三思考"},{"content":"最近在工作中遇到了一起 CSS style 样式无法生效的问题.特此记录.\n一些信息 项目中涉及的技术栈如下\nReact 18 Vite 5 根据目前分析的结果,可以认为任何直接注入 CSS 样式的库都会收到影响(包括 emotionJS), 不确定类似 Post CSS 之类的编译器会不会遇到该问题.但感觉上是可能的.\n表现 1 2 3 import image from \u0026#39;some.svg\u0026#39; const Foo = () =\u0026gt; \u0026lt;div style={{ maskImage: `url(${image})` }} /\u0026gt; 该代码在编译后产物内可以看到样式存在,但 Chrome 渲染之后,在 dom 内无法看到该条样式,若同时存在其他样式共存则其他样式不受影响.\n原因 原因是因为 Vite 默认所采取的 inline import 优化功能 会默认将小于 4kb 的文件以 data URL 形式内联进代码. 这在大部分情况下都是正常工作的,但在本用例下:\nsvg 小于 4kb, 满足内联条件 svg 本身是纯文本内容. dataURL 不会以 base64 形式而是直接以明文形式插入 css 样式本质上是 字符串拼接,且 js 内使用不会触发 vite 关于 CSS url() 的优化 所以会生成形如\n1 2 3 { maskImage: \u0026#39;url(data:image/svg+xml;utf8,\u0026lt;svg\u0026gt;...\u0026lt;/svg\u0026gt;)\u0026#39; } 的内容.该内容语法错误股会被浏览器忽略.\n解决方案: 1. 在 URL 外加上双引号 \u0026lt;\u0026quot;\u0026gt; 1 style={{ maskImage: `url(\u0026#34;${image}\u0026#34;)` }} 2. 在 Vite 中设置,不内联 svg 1 2 3 4 5 6 7 8 9 // vite.config.ts assetsInlineLimit(filePath, content) { //svg永远不内联 if (filePath.endsWith(\u0026#39;.svg\u0026#39;)) { return false } // 小于 4kb 的文件转为 base64 return content.length \u0026lt; 4 * 1024 }, #EOF\n","date":"2024-06-20T16:50:00+08:00","image":"https://queb.fun/p/1b7980ef/cover_hu_c3083a1233492364.webp","permalink":"https://queb.fun/p/1b7980ef/","title":"记一次CSS样式异常排查"},{"content":"跑题预警 虽然这是一篇关于 react cloneChildren 的文章,但我会插入大量上下文来说明为什么我选择使用了这个功能, 又写了篇文章说明需要谨慎使用的原因. 实际上该主题占用全文篇幅约 10%. 请酌情阅读~\n起因 最近在公司的项目中遇到了一个这样的场景: 需求编写一个无头的 tab 组件,其中作为 tabItem 可以接受任意的 Component 作为子项,参数又外部控制\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const SomeTab = () =\u0026gt; { const [active, setActive] = useState(0) return ( \u0026lt;TabList active={active} setActive={setActive}\u0026gt; \u0026lt;TabItem\u0026gt; \u0026lt;CustomComp /\u0026gt; \u0026lt;/TabItem\u0026gt; \u0026lt;TabItem\u0026gt; \u0026lt;CustomComp /\u0026gt; \u0026lt;/TabItem\u0026gt; \u0026lt;TabItem\u0026gt; \u0026lt;CustomComp /\u0026gt; \u0026lt;/TabItem\u0026gt; \u0026lt;/TabList\u0026gt; ) } 然后在我的用例当中,实际上我不需要 item 组件有过高的业务复杂度,仅需要能根据状态切换显示就可以了. 于是我进行约定: 自定义组件可以接受某个 \u0026lsquo;active\u0026rsquo; 的我的第一版代码如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 //定义组件props类型 active 与 setActive 作为 context 传递, 剩余props 透传给内部 div 容器 interface ITabContext\u0026lt;T extends string\u0026gt; extends HTMLAttributes\u0026lt;HTMLDivElement\u0026gt; { active: T setActive: (active: T) =\u0026gt; void } const TabContext = createContext\u0026lt;ITabContext\u0026lt;any\u0026gt;\u0026gt;({ active: \u0026#39;\u0026#39;, setActive: () =\u0026gt; {}, }) export function TabList\u0026lt;T extends string\u0026gt;( props: PropsWithChildren\u0026lt;ITabContext\u0026lt;T\u0026gt;\u0026gt; ) { const { children, active, setActive, ...rest } = props const value = useMemo(() =\u0026gt; ({ active, setActive }), [active, setActive]) return ( \u0026lt;TabContext.Provider value={value}\u0026gt; \u0026lt;div {...rest}\u0026gt;{children}\u0026lt;/div\u0026gt; \u0026lt;/TabContext.Provider\u0026gt; ) } 这样容器组件就完成了, 接下来只需要在孩子组件当中响应选择事件就可以\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 interface ITabItemProps { value: string } export const TabItem: React.FC\u0026lt;PropsWithChildren\u0026lt;ITabItemProps\u0026gt;\u0026gt; = ({ children, value, }) =\u0026gt; { const { active, setActive } = useContext(TabContext) const id = useId() const fid = `tabItem-${id}` const isActive = active === value return ( \u0026lt;div\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id={fid} hidden onChange={() =\u0026gt; { setActive(value) }} checked={isActive} /\u0026gt; \u0026lt;label htmlFor={fid} data-active={active}\u0026gt; {children} \u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt; ) } 一切都是那么的完美,现在只需要在 css 当中获取 data-active 状态就可以了\u0026hellip;吗?\n当时写下这段代码的我对于自己的 css 水平还是过于乐观了,在写完这段代码 3 分钟 之后才逐渐意识到问题所在.\n首先我们需要知道, css 3 标准提供了一个名为 属性选择器 (Attribute selectors) 的功能, 它让你可以以形如\n1 2 3 \u0026amp;[data-active=\u0026#39;true\u0026#39;] { color: red; } 的方式进行样式选择,这大大加强了在使用静态 css 进行样式控制的能力. 我们可以使用类似 \u0026lt;div data-active={true}\u0026gt;Content!\u0026lt;/div\u0026gt; 的方式控制 css 样式而不需要使用 css-in-js 的方式.\n但这有一个问题, 这个选择器选择的是 html 属性. 这意味着该属性实际上无法传递给子元素. 加之 css 本身并不支持父级选择器, 所以在动态传入孩子的用例中便无法使用这种方法. 那么有没有什么东西是可以传递给孩子(当然,还需要有作用域控制. 我可不想为起名字绞尽脑汁!)呢? 答案当然是有的\u0026ndash; 那就是 css 变量 (css variables). 再加上 @container 查询, 一顿 Google 之后代码变成了这样\n1 2 3 4 //... \u0026lt;label htmlFor={fid} style={{ \u0026#39;--active\u0026#39;: 1 }}\u0026gt; {children} \u0026lt;/label\u0026gt; 1 2 3 4 /* children.css*/ @container style(--active:1) { /*activeCss*/ } 芜湖完美 不过这个 @container 怎么没听说过\n以防万一还是确认一下兼容性\u0026hellip;\n彳亍, 105 开始, 120 正式支持. 那这个指定用不上了. 那还想要达到这种效果只能考虑最传统的 props inject 了. 简单搓一个\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { Children, ReactNode, cloneElement, ReactElement } from \u0026#39;react\u0026#39; export function injectChildrenProp( children: ReactNode | ReactNode[], props: object ) { return Children.map(children, (child) =\u0026gt; { if (typeof child !== \u0026#39;object\u0026#39;) return child return cloneElement( child as React.ReactElement\u0026lt;object\u0026gt;, Object.assign({}, (child as ReactElement).props, props) ) }) } 正文 总结 纯粹的代码开发到这里就结束惹, 时候总结的时候我的想法是, 尽管这种写法省略了为孩子传参,看起来会优雅一些.但是隐藏 prop 从长远来看是增加了后续维护的难度的.后续的改进思路是给 TabItem 的 children 加上类型限定, 如果再次设计我也可能会选择闭包的形式 like:\n1 2 3 \u0026lt;TabList\u0026gt; \u0026lt;TabItem\u0026gt;{(active) =\u0026gt; \u0026lt;CustomElement /\u0026gt;}\u0026lt;/TabItem\u0026gt; \u0026lt;/TabList\u0026gt; 但是这样就有点丑不是\u0026hellip;所以还是一个取舍问题.\n","date":"2023-12-18T14:17:01+08:00","image":"https://queb.fun/p/86d911df/cover_hu_954efab81485f029.webp","permalink":"https://queb.fun/p/86d911df/","title":"谨慎使用react属性注入"},{"content":"zod zod 是一个蛮有意思的类型检查库, 补全了 typescript 无法运行时检查的一些不足, 同时还提供了一些转换功能. 但目前来说对于 function 类型存在一些 args 推导方面的问题.\nBiome Biome 一个集成了类型检查 + 格式化的代码审查工具. 特色是用 rust 写的所以速度飞快. 但目前对规则的支持还不足以满足我项目的需求. 观望中.\n2023-12-18 更新 最近发现了一个类似的工具 oxc. 同样加入关注列表.\n","date":"2023-12-13T17:15:52+08:00","permalink":"https://queb.fun/p/a2d31c0e/","title":"React生态观察 2023年12月篇"},{"content":"沈める街\n兴趣的丧失比想象中更快, 在尚未发现的某个时间.\n最近谈不上在学习什么东西, 每天下班之后回到家也只是看一些视频.\nzod 是一个蛮有意思的类型检查库, 但对于 func type 的检查还是不够令人满意,目前还在研究中.\n冬天到了,最近睡觉很难睡醒,感觉比夏天时候更加嗜睡了.\n","date":"2023-12-13T16:50:51+08:00","image":"https://queb.fun/p/e5d42f4f/cover_hu_c8f060d8a12bced5.webp","permalink":"https://queb.fun/p/e5d42f4f/","title":"摸鱼笔记 壱"},{"content":"前情提要 在开发某个 3d 相关的微服务项目的时候,我使用了@react-three/fiber作为渲染引擎.在开发过程中,我发现了一个很奇怪的问题,就是在外层 dom 元素应用了 CSS transform scale 之后,f3c的渲染会再次应用一次缩放.\n问题排查 \u0026amp; 解决 通过查看 f3c 文档可知,f3c 会在渲染的时候,将 canvas 的 width 和 height 设置为 100%,然后通过读取外部容器的大小来确定 canvas 的大小.这样做的目的是为了自适应外部容器的大小.\n具体而言,f3c 使用了 react-use-measure 作为获取 dom 元素大小的库. 而问题则出在这里.\n通过查看 react-use-measure 的源码可以发现.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // ... const { left, top, width, height, bottom, right, x, y } = state.current.element.getBoundingClientRect() as unknown as RectReadOnly const size = { left, top, width, height, bottom, right, x, y, } if (state.current.element instanceof HTMLElement \u0026amp;\u0026amp; offsetSize) { size.height = state.current.element.offsetHeight size.width = state.current.element.offsetWidth } // ... 在默认行为当中, react-use-measure 会默认使用 getBoundingClientRect 来获取 dom 元素的大小.而 getBoundingClientRect 获取到的大小是经过 transform 之后的大小.这就导致了 f3c 在渲染的时候,会再次应用一次缩放.\n而解决这个问题也很简单,只需要传递一个 offsetSize 参数,就可以让 react-use-measure 使用 offsetWidth 和 offsetHeight 来获取 dom 元素的大小. offsetWidth 本身并不会受 transform 影响.\n1 2 3 4 5 6 \u0026lt;Canvas resize={{ // 解决css csale 造成的canvas大小不一致问题 offsetSize: true, }} \u0026gt;\u0026lt;/Canvas\u0026gt; 碎碎念 天知道这个问题到底掉了我多少头发\u0026hellip; 之前没有用过 getBoundingClientRect, 完全不知道还有这种坑. css 中绝大部分属性都是不响应 transform 的,但是 getBoundingClientRect 却是响应的.这个真的是太难了.\n参考链接 react-use-measure MDN - Element.getBoundingClientRect() MDN - HTMLElement.offsetHeight Pixiv - ガケの国の隠れ家 ","date":"2023-12-12T10:00:00+08:00","image":"https://queb.fun/p/6c28e634/cover_hu_95d51679469c1612.webp","permalink":"https://queb.fun/p/6c28e634/","title":"一次关于r3f异常缩放的排查"},{"content":"啊\n尽管是打算说明一下来着,但是真的很累\n最近又阳了,身体不好.还用掉了宝贵的年假,真的是太难了\n说起来已经是第三次了吧,这次的强度感觉和第一次差不多.直接高烧放倒\n正在慢慢把之前博客的文章迁移过来,部分图片可能会失效,这个就没办法了.\n希望大家都身体健康!\nFS, 19 Oct 2023\nPhoto by Pawel Czerwinski on Unsplash\n","date":"2023-10-19T00:00:00Z","image":"https://queb.fun/p/hello-world/cover_hu_e95a4276bf860a84.jpg","permalink":"https://queb.fun/p/hello-world/","title":"Hello World"},{"content":"如果有朝一日我用上了,那我可真是个铁憨憨\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 -----BEGIN PGP MESSAGE----- hQEMAxStlBvpAgJMAQf9FWiGY9Ak8TRDnbQ31zasR4Ttc+CDy5fxieNbWrt18UjV A4ib3Sj7QjyD4xFmoiuv7YzeoehpFoonCndrWqEduoefenZoF/agMzy9gtUf/uxZ RPvbV6KTxUMy6tj2pWv9Hv+MdwF/VpqzTPxMFM3HQ5LQ3rdOxSzsrCOiV2IKa9yU T2auig0fDhnwFOLuNlqs8WlJebLjtnD3Uszm8IDJiOs6s1DG1PlcTUGrflMfeCa2 1JvikLZKhIbTPIxjfF/Q2v5vEsvFBDj6s/cVTKRS02N1bRNePaTeez2z7qgt6z73 Ft7ugqA2rRBi7wphhz0K3m1hKDanSwJ1XNL/hsqiK9TA8gEJAhBW4SDHsvbciJmv RCCtYGO1/uCqBQO1otKCIsu3n3kWjRNkdxV3a07KXwDT7PhsLsj2Egmx6JurVUoc he6M26Ke3ngbQDlYAwtc8hOSpQg5Ddgn1hNMtC/f3uWwShznl9HiAUe+X41h9AAg lNIlXXSXvE7aik32+xewFVlNTENDbCezN48PQyI+z5I4s5RR/us+g2OTLQvGiGY9 DIrvokAi3SC4U6nc4+5FWlt1B9KzrWlIz5w6tk3+xqRnXh74sgmJR9hQv9h6vgVE Fs7Mn3tq51aY+oBINy01Tyq4Yybyby+dhtzqcpfrjwFaGx1kBjDgTb+NSUjdbRLg OIIFVrcazjn12lBt+o+9I/+/NXb8BilmG4uDU+OnFA+pYi4kpIOd6uCAG02JFylE mxk1l4+8WbL6xXmtUr5DTyIn/KGVlN+C1mO8wBwER1yEsqMeyufu6xs5CF1YQo+I Pn0hKVaDB4X7OIDopbdJYxKotBymPlTRtbBJ0NQMmPydg94j64R7NnJZj+P6bVQq PN09grWXnqZy7C5TpIQYIyE7wrS3xj0oc9CWX5EGe0hXdOku =Zgro -----END PGP MESSAGE----- ","date":"2022-04-11T22:16:47Z","permalink":"https://queb.fun/p/3lweya3t/","title":"记录一下让自己显得很愚蠢的东西"},{"content":"前段时间在新环境上配置 gpg 时,下意识安装了 win4gpg.然后在从 Canokey 导入私钥的时候遇到了 gpg 行为十分怪异的情况.\n检查之后发现是因为 windows git ,如果选择使用 git 捆绑的 openSSH 的话,他会自己带一个 gpg.导致和 win4gpg 互相干扰\n卸载掉 win4gpg 之后,重新 fetch 卡片就解决了\n","date":"2022-03-30T23:19:45Z","permalink":"https://queb.fun/p/windows-gpg/","title":"记重新安装windows下GPG踩到的坑"},{"content":"研究了两天，尝试用 Valtio 重构之前的一个项目，有了一些收获\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 //a.ts const stateA = proxy({ id: 0, get activeID() { return state.id }, active: (id: number) =\u0026gt; { state.id = id }, }) //b.ts const stateB = proxy({ fState: ref(stateA), testChange: () =\u0026gt; { console.log(\u0026#39;其他的state可以互相引用修改\u0026#39;) state.fState.active(4) }, }) Valtio 好就好在可以用一个非常简单的模式完成 state 和 UI 的解耦，因为 state 本身是可变的，所以可以尽情的利用原生 js 的特性操作。不会有 react 额外的噪音。对于 react 的使用，我选择把所有可能的操作都封装为 hooks ，这样就尽可能的保证了 UI 的逻辑无关\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 //a.ts const stateA = proxy({ id: 0, get activeID() { return state.id }, active: (id: number) =\u0026gt; { state.id = id }, }) export function useStateA() { const _state = useSnapshot(stateA) return _state } //需要的生命周期 Hooks 和state封装在一起 export function useIDUpdate() { const _state = useSnapshot(stateA) useEffect(() =\u0026gt; { foo().then((res) =\u0026gt; { state.active(res) }) }, []) return state.activeID } 非常干净，非常清爽，非常强大。\n","date":"2022-02-25T03:01:35Z","image":"https://queb.fun/p/valtio-%E7%AC%94%E8%AE%B0%E5%85%B6%E4%B8%80%E6%AD%A3%E4%BA%A4%E7%9A%84%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/cover_hu_6b8acc51ba2746f5.webp","permalink":"https://queb.fun/p/valtio-%E7%AC%94%E8%AE%B0%E5%85%B6%E4%B8%80%E6%AD%A3%E4%BA%A4%E7%9A%84%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/","title":"Valtio 笔记其一：正交的状态管理"},{"content":"\n一些在我调查和实际生产中比较喜欢的解决方案\n状态管理 Valtio 目前用的最多的解决方案. 用起来有些坑(主要是 this 相关的部分)但整体来说很好.\nHelux 目前正在进行测试的方案. 优势在于属于 AIO 方案, 所以对于各种奇奇怪怪的用例都有支持. 是否喜欢这种大而全的解决方案就见仁见智了.\nMobx 备用方案,和 valtio 差不太多。问题在于必须使用 observer 包裹组件，而且兼容性不强\n路由 react-router 不用多说，官方推荐。不是非常易用但是足够好用，也懒得折腾更多了，之前有段时间（大概是 5.0 左右？）对 hooks 的支持很差所以尝试了其他的解决方案，现在支持还不错就换回来了。\nReact Hook Router 这就是当初用过的方案，现在不再推荐了因为 react-router 已经很好了，而且这个作者不喜欢 TS 所以这方面的支持也不太好，而且很久没更新了。但作为一个小型 router 的实现代码是值得学习的。\nCSS emotionJS 目前在用的，除了 css props 我颇有微词以外，其他的部分都算完美，css-in-js保证了样式的可控性（我知道大部分时候用不到，但是用得到的时候还是很爽的），使用完整的 CSS/SCSS 语法而不是什么Tailwind黑科技。库很小而且泛用性很高。本质上这东西和styled是一家子所以代码也很容易迁移。平台支持广：虽然理论上这东西支持 RN 但属实没必要。\nreact-spring 这东西我本来想单独分个动效来说的，但是讲道理好像和 CSS 重叠的部分还是很广的，也就一并讲了。\n很好用，虽然新的 api 有点反直觉但是能 get 到他们的设计思路所以我保留意见。实际上这个弹性库并不一定是用来给 css 的，你可以给任何你想加上可控曲线效果的地方用上。同样支持 RN，但没研究过。\n2D Pixi 新发现的玩具, 不同的地方在于使用了 WebGL 渲染所以性能非常的彳亍. 还没怎么用过回头再研究一下\nKonva 比较复杂，这东西其实是新建了一个 react 实例然后挂载在你的组件树上，所以会有一些奇妙的小问题。但总的来说还是足够好用。暂时找不到比它更方便的 canvas 库了，或者说更进一步的需求建议用 flutter。\n先写这么多，想起来什么再补充。\n题图 https://twitter.com/kirizieeel/status/1495523468657397762\n","date":"2022-02-21T16:33:51Z","permalink":"https://queb.fun/p/%E6%88%91%E4%B8%AD%E6%84%8F%E7%9A%84react%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","title":"我中意的React解决方案"},{"content":"不是。\n\u0026hellip;好吧 ┓( ´∀` )┏ 多说两句，为什么react hooks 在解决了大部分业务逻辑封装的问题之后仍然是不完美的，甚至于说是问题很大。\nReact本身的设计决定了它不是一个强大的状态/生命周期系统 React的生命周期完全服务于UI渲染，也仅限于UI渲染。然而大部分的业务逻辑是在与UI形成一定耦合的情况下，还需要更多更灵活的操作。例如一些CS交互和复合的事件系统。React的选择是将这部分完全交给第三方解决方案来处理（比如Mobx，Redux，Immer等等）。但这又带来了一个额外的问题。即React自身的生命周期是非常封闭的，外部的系统在非侵入的情况下很难直接操纵React的渲染逻辑。\nUI=f(State)\n是React的核心逻辑，但是这个State的位置却十分的微妙，受限于React的更新逻辑，无限制的使用 props 和 context 透传状态只会丧失精细控制渲染的能力。如果使用了Mobx等响应式的状态管理，又会和React自顶而下的数据流产生冲突。\n","date":"2022-02-18T15:00:09Z","permalink":"https://queb.fun/p/react-hooks-%E6%98%AF%E5%AE%8C%E7%BE%8E%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%90%97/","title":"React Hooks 是完美的解决方案吗"},{"content":" 为啥啊，当然是因为我懒 因为 Gridea 这种静态博客工具一个难以解决的问题就是怎么备份自己的post。尤其是之前用了hexo更换之后大量的元数据出现了问题，进一步恶化了这件事情。\n现在把整个post搬到了坚果云上，如果下次还记得这回事的话应该会稍微，好那么一点吧？\n","date":"2022-02-16T05:01:03Z","permalink":"https://queb.fun/p/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8%E4%BA%86gridea%E6%9B%B4%E6%96%B0%E7%9A%84%E6%9B%B4%E5%B0%91%E4%BA%86/","title":"为什么用了Gridea更新的更少了"},{"content":"主要记一下自己吃过的口味还不错的料理包。煮饭什么的最麻烦了\n王小余 总的来说这家料理包，油和调味用的不错。量比较少，盐中等\n肉末外婆菜 垃圾，别吃。肉末显微镜下可能能看见吧，我视力不好别搞\n香菇鸡丁 这个不错，口感和味道都不错\n啤酒鸭 究极垃圾，一股怪味。骨头还多。禽肉还是别料理包了，尤其是带骨头的\n武冈香干炒肉 实际上就是豆干炒豆干，肉不能说没有吧，但是别指望\n巴西烤肉 心中的 MVP，好吃就完事了。说起来都是调味料的味道但是都吃料理包了还要什么自行车\n青豆炒肉 还可以，炒肉=炒肉末，但好歹也是肉。青豆挺软的味道 ok\n这家的调味都挺相似的，油分比较大，不过不是油腻的那种。3.5/5\n卤肉 其实是卤肉馅，配图如下 梅菜扣肉 好吃，量大肉多。差点没吃完。秒了！\n香辣土匪鸭 禽肉还是别料理包了，尤其是带骨头的\n虽然这个调味更重口了所以勉强压住了那种恶心的味道，但不行就是不行，别买\n五香脆骨 脆骨口感不是很好，但是调味尚可。差强人意。\n新美香 在买上面那个王小余之前我买了挺久这家的。对比之后发现这家的口感很奇怪，像是加了不少增稠剂。但是用料上还是可以的，可能是我没有 get 到他的好。吃的挺多但是我记不大住了，就随便写几个\n台式卤肉 \u0026amp; 香菇卤肉 咸！ 这个卤肉某种意义上可以算作是浇头。当菜绝对是大材小用了。肉都是小丁丁而且偏肥。如果住了面之类的可以配一下，还不错\n咖喱鸡肉 除了那个奇怪的勾芡问题以外还可以，鸡肉的口感很松弛但是量还是够的。\n鱼香肉丝 同上，味道还行勾芡怪怪的。\n一些带骨肉的菜 统统不推荐，料理包不要买带骨头的，很蠢。\n肉末茄子 还可以，茄子倒是很适合他这个勾芡。我喜欢。\n未完待续\n","date":"2022-02-16T04:51:45Z","image":"https://queb.fun/p/d87d3df2/cover_hu_db50c32d4c03d13d.webp","permalink":"https://queb.fun/p/d87d3df2/","title":"料理包评测记录"},{"content":"Hexo很好,但是我不太懂它的模板语法,而且我懒,所以经过五分钟的调研我选择了 Gridea 作为博客的框架,然后从里面找了个顺眼的主题\nGridea的快捷键还不是很到位,也不支持Hot Reload,总的来说是能用,但是不算好用的,编辑器本身性能一般,不过我也不太介意,好看还是很好看的,重点是它的自动部署功能,不过我暂时没看到支持ssh,希望支持,否则就不太行了\n自定义主题还是算了,有心无力,这一年仍然是饱尝无力感的一年,希望大家平安.\n","date":"2020-07-13T14:35:29Z","permalink":"https://queb.fun/p/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0gridea/","title":"博客迁移到Gridea"},{"content":"Hexo 很好,但是我不太懂它的模板语法,而且我懒,所以经过五分钟的调研我选择了 Gridea 作为博客的框架,然后从里面找了个顺眼的主题\nGridea 的快捷键还不是很到位,也不支持Hot Reload,总的来说是能用,但是不算好用的,编辑器本身性能一般,不过我也不太介意,好看还是很好看的,重点是它的自动部署功能,不过我暂时没看到支持 ssh,希望支持,否则就不太行了\n自定义主题还是算了,有心无力,这一年仍然是饱尝无力感的一年,希望大家平安.\n","date":"2020-07-13T14:35:29Z","permalink":"https://queb.fun/p/44e94e99/","title":"博客迁移到Gridea"},{"content":"写在开头 ​\tJustin He大佬写的[Hackintosh]如何正确的黑苹果[原创]\n​\t本来打算写一篇安装黑苹果的教程，可网络上优质的教程已经很多了，重复造轮子并没有什么意义。所以我想谈一谈从16年接触黑苹果到现在，我安装黑苹果并排除错误的一些心得。\n​\n","date":"2018-12-03T21:11:19Z","permalink":"https://queb.fun/p/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E7%BB%8F%E9%AA%8C%E8%B0%88/","title":"黑苹果安装经验谈"},{"content":"\n​\t黑苹果升级到Mojave(10.14)后，遇到了通过预览打开jpg格式的图片时，预览会崩溃/卡转圈的情况，经过一番摸索，发现原因是预览调用了集显来解码JPG格式，而我因为有独显并没有打开集显。\n​\t除了通过修改为没有集显的机型SMBIOS 或者开启机器的集显，还有一种方法是在Clover中添加NoVPAJpeg.kext驱动来禁用集显解码。\n​\t原帖和Github放在了文章下方。\n​\t实测RX580工作正常。\n更多……：\n[HOW TO] Fix Quick Look and Preview issues in Mojave NoVPAJpeg 题图：id=56493506 ","date":"2018-11-26T19:02:17Z","permalink":"https://queb.fun/p/%E9%80%9A%E8%BF%87novpajpeg.kext%E8%A7%A3%E5%86%B3-macos-mojave10.14%E4%B8%8B%E9%A2%84%E8%A7%88jpg%E6%A0%BC%E5%BC%8F%E5%B4%A9%E6%BA%83/","title":"通过NoVpaJpeg.kext解决 macOS Mojave(10.14)下预览jpg格式崩溃"},{"content":" 本文所述内容来源于 https://www.insanelymac.com/forum/topic/335018-intel-fb-patcher-v165/\n自macOS版本来到10.14.1之后，过去常用的通过USBInjectall.kext 来破解系统USB端口数来完成后续修补的办法已经部分失效，本文即是为了在新版本系统中修补USB端口而作，其中核心内容译自开头链接\n所需工具：\nmacOS（如果有低于10.14.1的系统，可以直接进行修补而不需要重复下面的步骤） FB-Patcher （https://www.insanelymac.com/forum/topic/335018-intel-fb-patcher-v165/） USBInjectall.kext （https://github.com/RehabMan/OS-X-USB-Inject-All） Clover （文本编辑或者Clover Configurator） 一个可以使用的USB3.0设备 ===2019.4.5更新=== 步骤1 在Clover（/Clover/kexts/Other）中添加USBInjectall.kext，为了使其工作，在Clover-Acpi-DSDT中添加三个patch：\nRename XHC1 -\u0026gt; XHC Rename EHC1 -\u0026gt; EH01 Rename EHC2 -\u0026gt; EH02 步骤2 在Clover-boot-customflag中添加-uia_exclude_ss（屏蔽USB3.0控制器），重启电脑。\n此时你的电脑应该只有USB2.0控制器在工作。\n步骤3 启动FB-Patcher，选择General-USB。\n列表中绿色的项即是可以（正在）使用的USB2.0端口。此时你需要把电脑上每一个USB接口都插一遍。最后显示的部分就是你得电脑上所有可用的USB2.0端口。请特别留意你电脑的键盘/鼠标所对应的hs端口编号（比如我的是HS07与HS08，稍后会用到。将所有没有使用的端口选中，点击左下方的删除，然后导出成USBports.kext保存，USB2.0部分完成。\n步骤4 再次打开Clover，编辑bootflag将-uia_exclude_ss替换为-uia_exclude_hs;添加uia_include=\u0026lt;font color=\u0026quot;blue\u0026quot;\u0026gt;x\u0026lt;/font\u0026gt;。此处的x为刚刚获取的键盘鼠标端口（意为排除对键盘鼠标端口的屏蔽），重启电脑。重复步骤3，记录下所有可工作的SS端口\n注：一个USB3.0物理接口同时对应着USB2.0和USB3.0两个port，如果一个USB3.0接口只开启了SS port的话，它将不能识别USB2.0的设备，而USB2.0物理接口只对应一个hs port。\nUSB Connector 属性：\n0 为USB2.0 (480Mbps)； 3 为USB3.0 (5.0Gbps)； 255 为内建接口 ","date":"2018-11-17T21:39:54Z","permalink":"https://queb.fun/p/%E9%BB%91%E8%8B%B9%E6%9E%9Cfix-usb%E7%AB%AF%E5%8F%A3%E9%80%82%E7%94%A8%E4%BA%8E10.14.1/","title":"黑苹果fix USB端口（适用于10.14.1)"},{"content":" ​\t本文是我在研究黑苹果DSDT期间所做的技术笔记，可读性会很差，建议善用搜索功能。\n​\tClover修正DSDT的方式主要有两种：Patched 与 hotpatch。hotpatch主要是对原有的属性进行修正，而patched相当于为电脑添加了新的属性。故两者不能混淆。\n​\tClover对DSDT热修补(hotpatch)的大致思路是将现有的需要修正的DSDT进行「重命名」，然后制作一个自定的DSDT文件（.aml)。将系统原生的DSDT访问指向自定的文件，然后就可以做到自定义指定DSDT的行为，此处举例：\n1 2 3 Comment: Rename _DSM to XDSM Find: \u0026lt;5f44534d\u0026gt; Replace: \u0026lt;5844534d\u0026gt; 注：「_DSM」转为Hex写作\u0026lt;5f44534d\u0026gt;\n将系统原生的 _DSM 访问重定向至 XDSM，配合/clover/acpi/hotpatch下的.aml文件就可以拦截处理指定的DSDT。\n未完待续……\n","date":"2018-10-30T20:16:12Z","permalink":"https://queb.fun/p/clover-dsdt-%E7%AC%94%E8%AE%B0/","title":"Clover DSDT 笔记"},{"content":"2018.8.25：\n暂时修改了部分按钮的颜色——因为根本看不清（但还是很丑，会改的） 将毛玻璃的效果加入了配置文件 2018.8.25之前：\n修改了页面样式 删除了性能堪忧的过渡动画 一些不太记得的东西 TODO：\n将之前的脏代码整理到合适的地方 适配Chrome的毛玻璃效果（JS版） ","date":"2018-08-25T10:13:12Z","permalink":"https://queb.fun/p/%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9%E6%97%A5%E5%BF%97/","title":"主题修改日志"},{"content":"\n最近终于在百(shou)忙(lie)之余想起来还有个博客的事，最近几个月除了把博客搬迁到了gitpage就完全没有理睬这玩意，既然今天想起来了就干脆把之前魔改留下的坑稍微填一下……\n为什么会有这篇文章呢，为了让博客看着稍微正常点，我找了关于如何在Md页面中插入HTML的教程，最后发现是原生支持的……那么问题就变成了要在页面上插入些什么东西才好，思前想后果然还是王道征途，音乐控件吧\n那么就是惯例的Google，找到了如下的代码：\n1 \u0026lt;iframe frameborder=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34; marginwidth=\u0026#34;0\u0026#34; marginheight=\u0026#34;0\u0026#34; width=\u0026#34;320\u0026#34; height=\u0026#34;330\u0026#34; src=\u0026#34;https://music.163.com/outchain/player?type=0\u0026amp;amp;id=24972133\u0026amp;amp;auto=0\u0026amp;amp;height=430\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; 将这行代码直接放在需要的地方就可以实现如下效果的播放器：\n\u0026lt;iframe\u0026gt;控件的参数可以从这里看到，可以借助参数来调整控件的外观。不过最重要的还是src部分的参数，将sec部分的‘type’和‘id’部分替换成自己的就可以了 其中：\ntype为0的时候对应的是歌单的id； type为1的时候对应的是专辑的id； type为2的时候对应的是单曲的id 网易云自带的外链设置：https://music.163.com/#/outchain/_type/_id/m/use/html,将_type和_id改为需要的参数即可。\n2018.9.4更新\n最近将博客迁移到gitpages后发现此前的播放器不能正常显示，Google后发现是gitpage强制开启了https，而我之前的播放器src用了http……修改后解决\n参考链接\n题图：Pixiv_PID:70217074\n#EOF\n","date":"2018-08-23T08:49:33Z","permalink":"https://queb.fun/p/%E5%9C%A8hexo%E9%A1%B5%E9%9D%A2%E6%8F%92%E5%85%A5%E7%BD%91%E6%98%93%E4%BA%91%E6%92%AD%E6%94%BE%E5%99%A8/","title":"在hexo页面插入网易云播放器"},{"content":"最近几个月遇到了Play Store更新/下载应用时长时间卡在“正在下载…”的情况，然后过了几分钟之后突然开始下载的情况。一开始以为是网络的问题，但是反复检查没有头绪，于是搜索了一下，发现这个现象从去年开始就有相关的资料了（有理由怀疑是Google在搞什么动作）\n解决方法也很简单，强行退出Play Store之后，清空Play Store的数据，重新打开就恢复了。\n","date":"2018-08-23T05:01:22Z","permalink":"https://queb.fun/p/play-store%E6%9B%B4%E6%96%B0app%E5%8D%A1%E5%9C%A8%E6%AD%A3%E5%9C%A8%E4%B8%8B%E8%BD%BD%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","title":"Play Store更新APP卡在“正在下载”的解决方法"},{"content":"本文意在简要说明Nginx配置文件以尽快上手，诸多进阶配置项不在本文的介绍范围内，请自行Google :)\nNginx 文件树 Nginx的配置文件主要分为两类——Nginx自身的配置（即/etc/nginx/nginx.conf）和vHost配置文件（/etc/nginx/sites-available内文件）\n（图为/etc/nginx文件夹一览）\n关于Nginx.conf文件，一般情况下不需要调整就可以正常工作，所以本文暂不展开讲解。但是值得注意的是，决定使用哪个vHost配置文件的相关内容位于Nginx.conf文件内：\n1 2 3 4 5 6 7 ./nginx.conf ## # Virtual Host Configs ## include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*; 可以通过更改include字段来选择启用的vHost配置文件\nvHost配置 由上例可知，实际中Nginx使用的是./sites-enabled/下的配置文件，然而一般情况下，我们选择将配置文件放到./sites-available/文件夹下，然后将要应用的配置文件软链接到sites-enabled文件夹下来使用。\n如果你是通过apt或yum安装的Nginx，./sites-available/文件夹下应该会有一个default配置（也有可能同时存在它的备份），这就是nginx的默认配置文件。如果只是简单的端口转发/同时运行多个站点，只要在default的基础上进行修改即可。\n以下是一个default文件的例子：\n1 2 3 4 5 6 7 8 9 10 11 server { listen 80; server_name localhost; root /var/www; index index.html index.htm; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; location / { return 301 https://$host$request_uri; } } 其中：\nserver{}代表了一个服务端，理论上每个不同的服务对应着一个server； listen指你要监听的端口； server_name 指响应的域名 详见 https://www.jianshu.com/p/2d6f16a32b37 root 指网站的根目录 index指你网站的起始页面 location{}是该服务所响应的路径（即你的域名/IP后面的部分） 下面我们详细说明一下location\n1 2 3 4 5 6 location /blog { stub_status on; access_log off; root /var/www; index index.html; } location后面跟的“/”就是其响应的路径，其中“/”指的是响应所有路径。即形如“yourdomain.name/*** ”的URL都会被响应。如果location后面跟的是“/blog”，那么形如 “ yourdomain.name/blog ”的URL就会被响应。\n是的，同一个server可以有多个location。 同时在location内，server中的一些数据可以被覆盖，比如 root。\n修改日志：\n2018-04-16：稍作修改；\n2018-04-13：初版；\n#EOF\n","date":"2018-04-13T19:06:22Z","permalink":"https://queb.fun/p/nginx%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F%231%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%9D%E6%8E%A2/","title":"Nginx从入门到入土#1——配置文件初探"},{"content":"\n###2018.8.23更新： 显卡驱动换为WhateverGreen，在错觉程度的水平上提升了性能表现……\n今日apple推送了macOS 10.13.4 新增了对eGPU的支持，实测在配合 NvidiaGraphicsFixup 时，可以显著提升MacOS的图形性能。\n需要将 NvidiaGraphicsFixup 升级至1.2.5版本，WebDriver升级到387.10.10.10.30.103（即13.4最新版驱动）\n升级过程应该不用我多讲了。。。大家一试便知\n·附上 NvidiaGraphicsFixup 项目地址 https://github.com/lvs1974/NvidiaGraphicsFixup\n题图: http://adnmb1.com/t/6621569\n","date":"2018-03-31T11:53:12Z","permalink":"https://queb.fun/p/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%8D%87%E7%BA%A710.13.4%E6%98%BE%E5%8D%A1%E7%AF%87/","title":"黑苹果升级10.13.4——显卡篇"},{"content":"距离上一次试图浮岛大概过去了两年，期间断断续续写过很多字。\n然而如同往常一样，内心始终是对创作抱有抵触情绪的；又觉得矫情的无病呻吟实在是不适合放到外面引人发笑，加之腾讯云的学生政策变更导致我的学生主机莫名被取消了资格，便放弃了再自建博客的想法。\n但在这两年，尤其是2017年，在网络上遇见了许多年轻有为的人，在深深的羡慕同时，也萌发了留下一些东西的想法。虽然这些文字只能勉强称得上是经验之谈，但是相信如果有人能因为我的经验少掉一些头发，便也是令我心满意足的生存价值。\n我依旧是不擅长表达想法的，所以对于看完了这些无聊文字的你，请接受我对你献上的祝愿。\n愿属于你的自由终将来临。\n","date":"2018-03-20T19:13:48Z","permalink":"https://queb.fun/p/%E6%B2%89%E6%B2%89%E6%B5%AE%E6%B5%AE%E7%9A%84%E5%8D%83%E6%9C%A8%E5%B2%9B/","title":"沉沉浮浮的千木岛"}]